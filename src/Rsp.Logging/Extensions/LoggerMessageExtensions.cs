using System;
using Microsoft.Extensions.Logging;
using Rsp.Logging.Domain;

namespace Rsp.Logging.Extensions;

/// <summary>
/// Extensions methods for the <see cref="ILogger"/> interface.
/// </summary>
internal static partial class LoggerMessageExtensions
{
    /// <summary>
    /// Logs that a method was called/completed.
    /// </summary>
    /// <param name="logger"><see cref="ILogger" /></param>
    /// <param name="logLevel">Log level <see cref="LogLevel"/></param>
    /// <param name="eventId">Event Id of the log entry</param>
    /// <param name="method">Method name</param>
    /// <param name="message">Message to log</param>
    [LoggerMessage(Message = "{EventId} {Method} {Message}")]
    internal static partial void LogMessage(this ILogger logger, LogLevel logLevel, EventId eventId, string method, string message);

    /// <summary>
    /// Logs that a method was called/completed with parameters.
    /// </summary>
    /// <param name="logger"><see cref="ILogger" /></param>
    /// <param name="logLevel">Log level <see cref="LogLevel"/></param>
    /// <param name="eventId">Event Id of the log entry</param>
    /// <param name="method">Method name</param>
    /// <param name="parameters">Comma separated list of parameters</param>
    /// <param name="message">Message to log</param>
    [LoggerMessage(Message = "{EventId} {Method} {Parameters} {Message}")]
    internal static partial void LogMessage(this ILogger logger, LogLevel logLevel, EventId eventId, string method, string parameters, string message);

    /// <summary>
    /// Using <see cref="LoggerMessage"/> for High Performance logging, logs that method call is failed. The exception will be split into parts
    /// </summary>
    /// <param name="logger"><see cref="ILogger"/></param>
    /// <param name="method">Method name</param>
    /// <param name="errorCode">User defined error code</param>
    /// <param name="message">Message to log</param>
    [LoggerMessage(EventId = EventIds.Error, Level = LogLevel.Error, Message = "{Method} {ErrorCode} {Message}")]
    internal static partial void LogError(this ILogger logger, string method, string errorCode, string message);

    /// <summary>
    /// Using <see cref="LoggerMessage"/> for High Performance logging, logs that method call is failed. The exception will be split into parts
    /// </summary>
    /// <param name="logger"><see cref="ILogger"/></param>
    /// <param name="method">Method name</param>
    /// <param name="parameters">Comma separated list of parameters</param>
    /// <param name="errorCode">User defined error code</param>
    /// <param name="message">Message to log</param>
    [LoggerMessage(EventId = EventIds.ErrorWithParams, Level = LogLevel.Error, Message = "{Method} {Parameters} {ErrorCode} {Message}")]
    internal static partial void LogError(this ILogger logger, string method, string parameters, string errorCode, string message);

    /// <summary>
    /// Using <see cref="LoggerMessage"/> for High Performance logging, logs that method call is failed. The exception will be split into parts
    /// </summary>
    /// <param name="logger"><see cref="ILogger"/></param>
    /// <param name="method">Method name</param>
    /// <param name="errorCode">User defined error code</param>
    /// <param name="message">Message to log</param>
    /// <param name="exceptionMessage">Message generated by the exception</param>
    /// <param name="exception">Captured Exception</param>
    /// <param name="stackTrace">Stack trace of the exception</param>
    [LoggerMessage(EventId = EventIds.Exception, Level = LogLevel.Error, Message = "{Method} {ErrorCode} {Message} {ExceptionMessage} {StackTrace}")]
    internal static partial void LogError(this ILogger logger, string method, string errorCode, string message, string exceptionMessage, Exception exception, string stackTrace = "");

    /// <summary>
    /// Using <see cref="LoggerMessage"/> for High Performance logging, logs that method call is failed. The exception will be split into parts
    /// </summary>
    /// <param name="logger"><see cref="ILogger"/></param>
    /// <param name="method">Method name</param>
    /// <param name="parameters">Comma separated list of parameters</param>dsf
    /// <param name="errorCode">User defined error code</param>
    /// <param name="message">Message to log</param>
    /// <param name="exceptionMessage">Message generated by the exception</param>
    /// <param name="exception">Captured Exception</param>
    /// <param name="stackTrace">Stack trace of the exception</param>
    [LoggerMessage(EventId = EventIds.ExceptionWithParams, Level = LogLevel.Error, Message = "{Method} {Parameters} {ErrorCode} {Message} {ExceptionMessage} {StackTrace}")]
    internal static partial void LogError(this ILogger logger, string method, string parameters, string errorCode, string message, string exceptionMessage, Exception exception, string stackTrace = "");
}